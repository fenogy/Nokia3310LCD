CCS PCH C Compiler, Version 4.027, 37952               25-Jan-11 12:12

               Filename: K:\2Nokia 3310\nokia3310.lst

               ROM used: 2310 bytes (7%)
                         Largest free fragment is 30458
               RAM used: 500 (33%) at main() level
                         510 (33%) worst case
               Stack:    5 locations

*
0000:  GOTO   01C4
.................... #include "nokia3310.h" 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                       //High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... //#FUSES BORV25                   //Brownout reset at 2.5V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled 
.................... //#FUSES NOFCMEN                  //Fail-safe clock monitor disabled 
.................... //#FUSES NOPBADEN                 //PORTB pins are configured as digital I/O on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... //#FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... //#FUSES MCLR                     //Master Clear pin enabled 
.................... //#FUSES XINST                    //Extended set extension and Indexed Addressing mode enabled 
....................  
.................... #use delay(clock=4000000) 
0004:  MOVLW  01
0006:  MOVWF  FEA
0008:  MOVLW  F4
000A:  MOVWF  FE9
000C:  MOVF   FEF,W
000E:  BZ    002C
0010:  MOVLW  01
0012:  MOVWF  01
0014:  CLRF   00
0016:  DECFSZ 00,F
0018:  BRA    0016
001A:  DECFSZ 01,F
001C:  BRA    0014
001E:  MOVLW  4A
0020:  MOVWF  00
0022:  DECFSZ 00,F
0024:  BRA    0022
0026:  BRA    0028
0028:  DECFSZ FEF,F
002A:  BRA    0010
002C:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
....................  
....................  
....................  
.................... int countgloble; 
....................     // 7f Left Arrow   <- 
....................  
....................    
.................... void reset(); 
.................... void bytesender(int8 val); 
.................... void writecommand(int8 val); 
.................... void writedata(int8 val); 
.................... void putchara(char chr); 
.................... void putString(char *s); 
.................... void clearram(void); 
.................... void cursorxy(int8 x, int8 y); 
.................... void INIT(); 
.................... void switcher(int8 key); 
....................  
....................  
....................  
....................  char pixel_table[480] = {    
....................                            0x00,0x00,0x00,0x00,0x00,   // 20 space      ASCII table for NOKIA LCD: 96 rows * 5 bytes= 480 bytes 
....................                        0x00,0x00,0x5f,0x00,0x00,   // 21 !         Note that this is the same set of codes for character you 
....................                      0x00,0x07,0x00,0x07,0x00,   // 22 "         would find on a HD44780 based character LCD. :) 
....................                      0x14,0x7f,0x14,0x7f,0x14,   // 23 #         Also, given the size of the LCD (84 pixels by 48 pixels), 
....................                      0x24,0x2a,0x7f,0x2a,0x12,   // 24 $         the maximum number of characters per row is only 14. :) 
....................                      0x23,0x13,0x08,0x64,0x62,   // 25 % 
....................                      0x36,0x49,0x55,0x22,0x50,   // 26 & 
....................                      0x00,0x05,0x03,0x00,0x00,   // 27 ' 
....................                      0x00,0x1c,0x22,0x41,0x00,   // 28 ( 
....................                      0x00,0x41,0x22,0x1c,0x00,   // 29 ) 
....................                      0x14,0x08,0x3e,0x08,0x14,   // 2a * 
....................                      0x08,0x08,0x3e,0x08,0x08,   // 2b + 
....................                      0x00,0x50,0x30,0x00,0x00,   // 2c , 
....................                      0x08,0x08,0x08,0x08,0x08,   // 2d - 
....................                      0x00,0x60,0x60,0x00,0x00,   // 2e . 
....................                      0x20,0x10,0x08,0x04,0x02,   // 2f / 
....................                      0x3e,0x51,0x49,0x45,0x3e,   // 30 0 
....................                      0x00,0x42,0x7f,0x40,0x00,   // 31 1 
....................                      0x42,0x61,0x51,0x49,0x46,   // 32 2 
....................                      0x21,0x41,0x45,0x4b,0x31,   // 33 3 
....................                      0x18,0x14,0x12,0x7f,0x10,   // 34 4 
....................                      0x27,0x45,0x45,0x45,0x39,   // 35 5 
....................                      0x3c,0x4a,0x49,0x49,0x30,   // 36 6 
....................                      0x01,0x71,0x09,0x05,0x03,   // 37 7 
....................                      0x36,0x49,0x49,0x49,0x36,   // 38 8 
....................                      0x06,0x49,0x49,0x29,0x1e,   // 39 9 
....................                      0x00,0x36,0x36,0x00,0x00,   // 3a : 
....................                      0x00,0x56,0x36,0x00,0x00,   // 3b ; 
....................                      0x08,0x14,0x22,0x41,0x00,   // 3c < 
....................                      0x14,0x14,0x14,0x14,0x14,   // 3d = 
....................                      0x00,0x41,0x22,0x14,0x08,   // 3e > 
....................                      0x02,0x01,0x51,0x09,0x06,   // 3f ? 
....................                      0x32,0x49,0x79,0x41,0x3e,   // 40 @ 
....................                      0x7e,0x11,0x11,0x11,0x7e,   // 41 A 
....................                      0x7f,0x49,0x49,0x49,0x36,   // 42 B 
....................                      0x3e,0x41,0x41,0x41,0x22,   // 43 C 
....................                      0x7f,0x41,0x41,0x22,0x1c,   // 44 D 
....................                      0x7f,0x49,0x49,0x49,0x41,   // 45 E 
....................                      0x7f,0x09,0x09,0x09,0x01,   // 46 F 
....................                      0x3e,0x41,0x49,0x49,0x7a,   // 47 G 
....................                      0x7f,0x08,0x08,0x08,0x7f,   // 48 H 
....................                      0x00,0x41,0x7f,0x41,0x00,   // 49 I 
....................                      0x20,0x40,0x41,0x3f,0x01,   // 4a J 
....................                      0x7f,0x08,0x14,0x22,0x41,   // 4b K 
....................                      0x7f,0x40,0x40,0x40,0x40,   // 4c L 
....................                      0x7f,0x02,0x0c,0x02,0x7f,   // 4d M 
....................                      0x7f,0x04,0x08,0x10,0x7f,   // 4e N 
....................                      0x3e,0x41,0x41,0x41,0x3e,   // 4f O 
....................                      0x7f,0x09,0x09,0x09,0x06,   // 50 P 
....................                      0x3e,0x41,0x51,0x21,0x5e,   // 51 Q 
....................                      0x7f,0x09,0x19,0x29,0x46,   // 52 R 
....................                      0x46,0x49,0x49,0x49,0x31,   // 53 S 
....................                      0x01,0x01,0x7f,0x01,0x01,   // 54 T 
....................                      0x3f,0x40,0x40,0x40,0x3f,   // 55 U 
....................                      0x1f,0x20,0x40,0x20,0x1f,   // 56 V 
....................                      0x3f,0x40,0x38,0x40,0x3f,   // 57 W 
....................                      0x63,0x14,0x08,0x14,0x63,   // 58 X 
....................                      0x07,0x08,0x70,0x08,0x07,   // 59 Y 
....................                      0x61,0x51,0x49,0x45,0x43,   // 5a Z 
....................                      0x00,0x7f,0x41,0x41,0x00,   // 5b [ 
....................                      0x02,0x04,0x08,0x10,0x20,   // 5c Yen Currency Sign 
....................                      0x00,0x41,0x41,0x7f,0x00,   // 5d ] 
....................                      0x04,0x02,0x01,0x02,0x04,   // 5e ^ 
....................                      0x40,0x40,0x40,0x40,0x40,   // 5f _ 
....................                      0x00,0x01,0x02,0x04,0x00,   // 60 ` 
....................                      0x20,0x54,0x54,0x54,0x78,   // 61 a 
....................                      0x7f,0x48,0x44,0x44,0x38,   // 62 b 
....................                      0x38,0x44,0x44,0x44,0x20,   // 63 c 
....................                      0x38,0x44,0x44,0x48,0x7f,   // 64 d 
....................                      0x38,0x54,0x54,0x54,0x18,   // 65 e 
....................                      0x08,0x7e,0x09,0x01,0x02,   // 66 f 
....................                      0x0c,0x52,0x52,0x52,0x3e,   // 67 g 
....................                      0x7f,0x08,0x04,0x04,0x78,   // 68 h 
....................                      0x00,0x44,0x7d,0x40,0x00,   // 69 i 
....................                      0x20,0x40,0x44,0x3d,0x00,   // 6a j  
....................                      0x7f,0x10,0x28,0x44,0x00,   // 6b k 
....................                      0x00,0x41,0x7f,0x40,0x00,   // 6c l 
....................                      0x7c,0x04,0x18,0x04,0x78,   // 6d m 
....................                      0x7c,0x08,0x04,0x04,0x78,   // 6e n 
....................                      0x38,0x44,0x44,0x44,0x38,   // 6f o 
....................                      0x7c,0x14,0x14,0x14,0x08,   // 70 p 
....................                      0x08,0x14,0x14,0x18,0x7c,   // 71 q 
....................                      0x7c,0x08,0x04,0x04,0x08,   // 72 r 
....................                      0x48,0x54,0x54,0x54,0x20,   // 73 s 
....................                      0x04,0x3f,0x44,0x40,0x20,   // 74 t 
....................                      0x3c,0x40,0x40,0x20,0x7c,   // 75 u 
....................                      0x1c,0x20,0x40,0x20,0x1c,   // 76 v 
....................                      0x3c,0x40,0x30,0x40,0x3c,   // 77 w 
....................                      0x44,0x28,0x10,0x28,0x44,   // 78 x 
....................                      0x0c,0x50,0x50,0x50,0x3c,   // 79 y 
....................                      0x44,0x64,0x54,0x4c,0x44,   // 7a z 
....................                      0x00,0x08,0x36,0x41,0x00,   // 7b < 
....................                      0x00,0x00,0x7f,0x00,0x00,   // 7c | 
....................                      0x00,0x41,0x36,0x08,0x00,   // 7d > 
....................                      0x10,0x08,0x08,0x10,0x08,   // 7e Right Arrow    -> 
....................                      0x78,0x46,0x41,0x46,0x78 
....................                      }; 
....................  
....................  
....................  
....................  
.................... char str[12] = {'V','O','L','T','S','\0'}; 
.................... int i = 0; 
.................... void main() 
.................... { 
*
01C4:  CLRF   FF8
01C6:  BCF    FD0.7
01C8:  CLRF   FEA
01CA:  CLRF   FE9
01CC:  MOVLW  19
01CE:  MOVWF  FAF
01D0:  MOVLW  A6
01D2:  MOVWF  FAC
01D4:  MOVLW  90
01D6:  MOVWF  FAB
01D8:  BSF    FC1.0
01DA:  BSF    FC1.1
01DC:  BSF    FC1.2
01DE:  BCF    FC1.3
01E0:  CLRF   06
01E2:  CLRF   07
01E4:  CLRF   08
01E6:  CLRF   09
01E8:  CLRF   0A
01EA:  CLRF   0B
01EC:  CLRF   0C
01EE:  MOVLW  5F
01F0:  MOVWF  0D
01F2:  CLRF   0E
01F4:  CLRF   0F
01F6:  CLRF   10
01F8:  MOVLW  07
01FA:  MOVWF  11
01FC:  CLRF   12
01FE:  MOVWF  13
0200:  CLRF   14
0202:  MOVLW  14
0204:  MOVWF  15
0206:  MOVLW  7F
0208:  MOVWF  16
020A:  MOVLW  14
020C:  MOVWF  17
020E:  MOVLW  7F
0210:  MOVWF  18
0212:  MOVLW  14
0214:  MOVWF  19
0216:  MOVLW  24
0218:  MOVWF  1A
021A:  MOVLW  2A
021C:  MOVWF  1B
021E:  MOVLW  7F
0220:  MOVWF  1C
0222:  MOVLW  2A
0224:  MOVWF  1D
0226:  MOVLW  12
0228:  MOVWF  1E
022A:  MOVLW  23
022C:  MOVWF  1F
022E:  MOVLW  13
0230:  MOVWF  20
0232:  MOVLW  08
0234:  MOVWF  21
0236:  MOVLW  64
0238:  MOVWF  22
023A:  MOVLW  62
023C:  MOVWF  23
023E:  MOVLW  36
0240:  MOVWF  24
0242:  MOVLW  49
0244:  MOVWF  25
0246:  MOVLW  55
0248:  MOVWF  26
024A:  MOVLW  22
024C:  MOVWF  27
024E:  MOVLW  50
0250:  MOVWF  28
0252:  CLRF   29
0254:  MOVLW  05
0256:  MOVWF  2A
0258:  MOVLW  03
025A:  MOVWF  2B
025C:  CLRF   2C
025E:  CLRF   2D
0260:  CLRF   2E
0262:  MOVLW  1C
0264:  MOVWF  2F
0266:  MOVLW  22
0268:  MOVWF  30
026A:  MOVLW  41
026C:  MOVWF  31
026E:  CLRF   32
0270:  CLRF   33
0272:  MOVWF  34
0274:  MOVLW  22
0276:  MOVWF  35
0278:  MOVLW  1C
027A:  MOVWF  36
027C:  CLRF   37
027E:  MOVLW  14
0280:  MOVWF  38
0282:  MOVLW  08
0284:  MOVWF  39
0286:  MOVLW  3E
0288:  MOVWF  3A
028A:  MOVLW  08
028C:  MOVWF  3B
028E:  MOVLW  14
0290:  MOVWF  3C
0292:  MOVLW  08
0294:  MOVWF  3D
0296:  MOVWF  3E
0298:  MOVLW  3E
029A:  MOVWF  3F
029C:  MOVLW  08
029E:  MOVWF  40
02A0:  MOVWF  41
02A2:  CLRF   42
02A4:  MOVLW  50
02A6:  MOVWF  43
02A8:  MOVLW  30
02AA:  MOVWF  44
02AC:  CLRF   45
02AE:  CLRF   46
02B0:  MOVLW  08
02B2:  MOVWF  47
02B4:  MOVWF  48
02B6:  MOVWF  49
02B8:  MOVWF  4A
02BA:  MOVWF  4B
02BC:  CLRF   4C
02BE:  MOVLW  60
02C0:  MOVWF  4D
02C2:  MOVWF  4E
02C4:  CLRF   4F
02C6:  CLRF   50
02C8:  MOVLW  20
02CA:  MOVWF  51
02CC:  MOVLW  10
02CE:  MOVWF  52
02D0:  MOVLW  08
02D2:  MOVWF  53
02D4:  MOVLW  04
02D6:  MOVWF  54
02D8:  MOVLW  02
02DA:  MOVWF  55
02DC:  MOVLW  3E
02DE:  MOVWF  56
02E0:  MOVLW  51
02E2:  MOVWF  57
02E4:  MOVLW  49
02E6:  MOVWF  58
02E8:  MOVLW  45
02EA:  MOVWF  59
02EC:  MOVLW  3E
02EE:  MOVWF  5A
02F0:  CLRF   5B
02F2:  MOVLW  42
02F4:  MOVWF  5C
02F6:  MOVLW  7F
02F8:  MOVWF  5D
02FA:  MOVLW  40
02FC:  MOVWF  5E
02FE:  CLRF   5F
0300:  MOVLW  42
0302:  MOVWF  60
0304:  MOVLW  61
0306:  MOVWF  61
0308:  MOVLW  51
030A:  MOVWF  62
030C:  MOVLW  49
030E:  MOVWF  63
0310:  MOVLW  46
0312:  MOVWF  64
0314:  MOVLW  21
0316:  MOVWF  65
0318:  MOVLW  41
031A:  MOVWF  66
031C:  MOVLW  45
031E:  MOVWF  67
0320:  MOVLW  4B
0322:  MOVWF  68
0324:  MOVLW  31
0326:  MOVWF  69
0328:  MOVLW  18
032A:  MOVWF  6A
032C:  MOVLW  14
032E:  MOVWF  6B
0330:  MOVLW  12
0332:  MOVWF  6C
0334:  MOVLW  7F
0336:  MOVWF  6D
0338:  MOVLW  10
033A:  MOVWF  6E
033C:  MOVLW  27
033E:  MOVWF  6F
0340:  MOVLW  45
0342:  MOVWF  70
0344:  MOVWF  71
0346:  MOVWF  72
0348:  MOVLW  39
034A:  MOVWF  73
034C:  MOVLW  3C
034E:  MOVWF  74
0350:  MOVLW  4A
0352:  MOVWF  75
0354:  MOVLW  49
0356:  MOVWF  76
0358:  MOVWF  77
035A:  MOVLW  30
035C:  MOVWF  78
035E:  MOVLW  01
0360:  MOVWF  79
0362:  MOVLW  71
0364:  MOVWF  7A
0366:  MOVLW  09
0368:  MOVWF  7B
036A:  MOVLW  05
036C:  MOVWF  7C
036E:  MOVLW  03
0370:  MOVWF  7D
0372:  MOVLW  36
0374:  MOVWF  7E
0376:  MOVLW  49
0378:  MOVWF  7F
037A:  MOVWF  x80
037C:  MOVWF  x81
037E:  MOVLW  36
0380:  MOVWF  x82
0382:  MOVLW  06
0384:  MOVWF  x83
0386:  MOVLW  49
0388:  MOVWF  x84
038A:  MOVWF  x85
038C:  MOVLW  29
038E:  MOVWF  x86
0390:  MOVLW  1E
0392:  MOVWF  x87
0394:  CLRF   x88
0396:  MOVLW  36
0398:  MOVWF  x89
039A:  MOVWF  x8A
039C:  CLRF   x8B
039E:  CLRF   x8C
03A0:  CLRF   x8D
03A2:  MOVLW  56
03A4:  MOVWF  x8E
03A6:  MOVLW  36
03A8:  MOVWF  x8F
03AA:  CLRF   x90
03AC:  CLRF   x91
03AE:  MOVLW  08
03B0:  MOVWF  x92
03B2:  MOVLW  14
03B4:  MOVWF  x93
03B6:  MOVLW  22
03B8:  MOVWF  x94
03BA:  MOVLW  41
03BC:  MOVWF  x95
03BE:  CLRF   x96
03C0:  MOVLW  14
03C2:  MOVWF  x97
03C4:  MOVWF  x98
03C6:  MOVWF  x99
03C8:  MOVWF  x9A
03CA:  MOVWF  x9B
03CC:  CLRF   x9C
03CE:  MOVLW  41
03D0:  MOVWF  x9D
03D2:  MOVLW  22
03D4:  MOVWF  x9E
03D6:  MOVLW  14
03D8:  MOVWF  x9F
03DA:  MOVLW  08
03DC:  MOVWF  xA0
03DE:  MOVLW  02
03E0:  MOVWF  xA1
03E2:  MOVLW  01
03E4:  MOVWF  xA2
03E6:  MOVLW  51
03E8:  MOVWF  xA3
03EA:  MOVLW  09
03EC:  MOVWF  xA4
03EE:  MOVLW  06
03F0:  MOVWF  xA5
03F2:  MOVLW  32
03F4:  MOVWF  xA6
03F6:  MOVLW  49
03F8:  MOVWF  xA7
03FA:  MOVLW  79
03FC:  MOVWF  xA8
03FE:  MOVLW  41
0400:  MOVWF  xA9
0402:  MOVLW  3E
0404:  MOVWF  xAA
0406:  MOVLW  7E
0408:  MOVWF  xAB
040A:  MOVLW  11
040C:  MOVWF  xAC
040E:  MOVWF  xAD
0410:  MOVWF  xAE
0412:  MOVLW  7E
0414:  MOVWF  xAF
0416:  MOVLW  7F
0418:  MOVWF  xB0
041A:  MOVLW  49
041C:  MOVWF  xB1
041E:  MOVWF  xB2
0420:  MOVWF  xB3
0422:  MOVLW  36
0424:  MOVWF  xB4
0426:  MOVLW  3E
0428:  MOVWF  xB5
042A:  MOVLW  41
042C:  MOVWF  xB6
042E:  MOVWF  xB7
0430:  MOVWF  xB8
0432:  MOVLW  22
0434:  MOVWF  xB9
0436:  MOVLW  7F
0438:  MOVWF  xBA
043A:  MOVLW  41
043C:  MOVWF  xBB
043E:  MOVWF  xBC
0440:  MOVLW  22
0442:  MOVWF  xBD
0444:  MOVLW  1C
0446:  MOVWF  xBE
0448:  MOVLW  7F
044A:  MOVWF  xBF
044C:  MOVLW  49
044E:  MOVWF  xC0
0450:  MOVWF  xC1
0452:  MOVWF  xC2
0454:  MOVLW  41
0456:  MOVWF  xC3
0458:  MOVLW  7F
045A:  MOVWF  xC4
045C:  MOVLW  09
045E:  MOVWF  xC5
0460:  MOVWF  xC6
0462:  MOVWF  xC7
0464:  MOVLW  01
0466:  MOVWF  xC8
0468:  MOVLW  3E
046A:  MOVWF  xC9
046C:  MOVLW  41
046E:  MOVWF  xCA
0470:  MOVLW  49
0472:  MOVWF  xCB
0474:  MOVWF  xCC
0476:  MOVLW  7A
0478:  MOVWF  xCD
047A:  MOVLW  7F
047C:  MOVWF  xCE
047E:  MOVLW  08
0480:  MOVWF  xCF
0482:  MOVWF  xD0
0484:  MOVWF  xD1
0486:  MOVLW  7F
0488:  MOVWF  xD2
048A:  CLRF   xD3
048C:  MOVLW  41
048E:  MOVWF  xD4
0490:  MOVLW  7F
0492:  MOVWF  xD5
0494:  MOVLW  41
0496:  MOVWF  xD6
0498:  CLRF   xD7
049A:  MOVLW  20
049C:  MOVWF  xD8
049E:  MOVLW  40
04A0:  MOVWF  xD9
04A2:  MOVLW  41
04A4:  MOVWF  xDA
04A6:  MOVLW  3F
04A8:  MOVWF  xDB
04AA:  MOVLW  01
04AC:  MOVWF  xDC
04AE:  MOVLW  7F
04B0:  MOVWF  xDD
04B2:  MOVLW  08
04B4:  MOVWF  xDE
04B6:  MOVLW  14
04B8:  MOVWF  xDF
04BA:  MOVLW  22
04BC:  MOVWF  xE0
04BE:  MOVLW  41
04C0:  MOVWF  xE1
04C2:  MOVLW  7F
04C4:  MOVWF  xE2
04C6:  MOVLW  40
04C8:  MOVWF  xE3
04CA:  MOVWF  xE4
04CC:  MOVWF  xE5
04CE:  MOVWF  xE6
04D0:  MOVLW  7F
04D2:  MOVWF  xE7
04D4:  MOVLW  02
04D6:  MOVWF  xE8
04D8:  MOVLW  0C
04DA:  MOVWF  xE9
04DC:  MOVLW  02
04DE:  MOVWF  xEA
04E0:  MOVLW  7F
04E2:  MOVWF  xEB
04E4:  MOVWF  xEC
04E6:  MOVLW  04
04E8:  MOVWF  xED
04EA:  MOVLW  08
04EC:  MOVWF  xEE
04EE:  MOVLW  10
04F0:  MOVWF  xEF
04F2:  MOVLW  7F
04F4:  MOVWF  xF0
04F6:  MOVLW  3E
04F8:  MOVWF  xF1
04FA:  MOVLW  41
04FC:  MOVWF  xF2
04FE:  MOVWF  xF3
0500:  MOVWF  xF4
0502:  MOVLW  3E
0504:  MOVWF  xF5
0506:  MOVLW  7F
0508:  MOVWF  xF6
050A:  MOVLW  09
050C:  MOVWF  xF7
050E:  MOVWF  xF8
0510:  MOVWF  xF9
0512:  MOVLW  06
0514:  MOVWF  xFA
0516:  MOVLW  3E
0518:  MOVWF  xFB
051A:  MOVLW  41
051C:  MOVWF  xFC
051E:  MOVLW  51
0520:  MOVWF  xFD
0522:  MOVLW  21
0524:  MOVWF  xFE
0526:  MOVLW  5E
0528:  MOVWF  xFF
052A:  MOVLW  7F
052C:  MOVLB  1
052E:  MOVWF  x00
0530:  MOVLW  09
0532:  MOVWF  x01
0534:  MOVLW  19
0536:  MOVWF  x02
0538:  MOVLW  29
053A:  MOVWF  x03
053C:  MOVLW  46
053E:  MOVWF  x04
0540:  MOVWF  x05
0542:  MOVLW  49
0544:  MOVWF  x06
0546:  MOVWF  x07
0548:  MOVWF  x08
054A:  MOVLW  31
054C:  MOVWF  x09
054E:  MOVLW  01
0550:  MOVWF  x0A
0552:  MOVWF  x0B
0554:  MOVLW  7F
0556:  MOVWF  x0C
0558:  MOVLW  01
055A:  MOVWF  x0D
055C:  MOVWF  x0E
055E:  MOVLW  3F
0560:  MOVWF  x0F
0562:  MOVLW  40
0564:  MOVWF  x10
0566:  MOVWF  x11
0568:  MOVWF  x12
056A:  MOVLW  3F
056C:  MOVWF  x13
056E:  MOVLW  1F
0570:  MOVWF  x14
0572:  MOVLW  20
0574:  MOVWF  x15
0576:  MOVLW  40
0578:  MOVWF  x16
057A:  MOVLW  20
057C:  MOVWF  x17
057E:  MOVLW  1F
0580:  MOVWF  x18
0582:  MOVLW  3F
0584:  MOVWF  x19
0586:  MOVLW  40
0588:  MOVWF  x1A
058A:  MOVLW  38
058C:  MOVWF  x1B
058E:  MOVLW  40
0590:  MOVWF  x1C
0592:  MOVLW  3F
0594:  MOVWF  x1D
0596:  MOVLW  63
0598:  MOVWF  x1E
059A:  MOVLW  14
059C:  MOVWF  x1F
059E:  MOVLW  08
05A0:  MOVWF  x20
05A2:  MOVLW  14
05A4:  MOVWF  x21
05A6:  MOVLW  63
05A8:  MOVWF  x22
05AA:  MOVLW  07
05AC:  MOVWF  x23
05AE:  MOVLW  08
05B0:  MOVWF  x24
05B2:  MOVLW  70
05B4:  MOVWF  x25
05B6:  MOVLW  08
05B8:  MOVWF  x26
05BA:  MOVLW  07
05BC:  MOVWF  x27
05BE:  MOVLW  61
05C0:  MOVWF  x28
05C2:  MOVLW  51
05C4:  MOVWF  x29
05C6:  MOVLW  49
05C8:  MOVWF  x2A
05CA:  MOVLW  45
05CC:  MOVWF  x2B
05CE:  MOVLW  43
05D0:  MOVWF  x2C
05D2:  CLRF   x2D
05D4:  MOVLW  7F
05D6:  MOVWF  x2E
05D8:  MOVLW  41
05DA:  MOVWF  x2F
05DC:  MOVWF  x30
05DE:  CLRF   x31
05E0:  MOVLW  02
05E2:  MOVWF  x32
05E4:  MOVLW  04
05E6:  MOVWF  x33
05E8:  MOVLW  08
05EA:  MOVWF  x34
05EC:  MOVLW  10
05EE:  MOVWF  x35
05F0:  MOVLW  20
05F2:  MOVWF  x36
05F4:  CLRF   x37
05F6:  MOVLW  41
05F8:  MOVWF  x38
05FA:  MOVWF  x39
05FC:  MOVLW  7F
05FE:  MOVWF  x3A
0600:  CLRF   x3B
0602:  MOVLW  04
0604:  MOVWF  x3C
0606:  MOVLW  02
0608:  MOVWF  x3D
060A:  MOVLW  01
060C:  MOVWF  x3E
060E:  MOVLW  02
0610:  MOVWF  x3F
0612:  MOVLW  04
0614:  MOVWF  x40
0616:  MOVLW  40
0618:  MOVWF  x41
061A:  MOVWF  x42
061C:  MOVWF  x43
061E:  MOVWF  x44
0620:  MOVWF  x45
0622:  CLRF   x46
0624:  MOVLW  01
0626:  MOVWF  x47
0628:  MOVLW  02
062A:  MOVWF  x48
062C:  MOVLW  04
062E:  MOVWF  x49
0630:  CLRF   x4A
0632:  MOVLW  20
0634:  MOVWF  x4B
0636:  MOVLW  54
0638:  MOVWF  x4C
063A:  MOVWF  x4D
063C:  MOVWF  x4E
063E:  MOVLW  78
0640:  MOVWF  x4F
0642:  MOVLW  7F
0644:  MOVWF  x50
0646:  MOVLW  48
0648:  MOVWF  x51
064A:  MOVLW  44
064C:  MOVWF  x52
064E:  MOVWF  x53
0650:  MOVLW  38
0652:  MOVWF  x54
0654:  MOVWF  x55
0656:  MOVLW  44
0658:  MOVWF  x56
065A:  MOVWF  x57
065C:  MOVWF  x58
065E:  MOVLW  20
0660:  MOVWF  x59
0662:  MOVLW  38
0664:  MOVWF  x5A
0666:  MOVLW  44
0668:  MOVWF  x5B
066A:  MOVWF  x5C
066C:  MOVLW  48
066E:  MOVWF  x5D
0670:  MOVLW  7F
0672:  MOVWF  x5E
0674:  MOVLW  38
0676:  MOVWF  x5F
0678:  MOVLW  54
067A:  MOVWF  x60
067C:  MOVWF  x61
067E:  MOVWF  x62
0680:  MOVLW  18
0682:  MOVWF  x63
0684:  MOVLW  08
0686:  MOVWF  x64
0688:  MOVLW  7E
068A:  MOVWF  x65
068C:  MOVLW  09
068E:  MOVWF  x66
0690:  MOVLW  01
0692:  MOVWF  x67
0694:  MOVLW  02
0696:  MOVWF  x68
0698:  MOVLW  0C
069A:  MOVWF  x69
069C:  MOVLW  52
069E:  MOVWF  x6A
06A0:  MOVWF  x6B
06A2:  MOVWF  x6C
06A4:  MOVLW  3E
06A6:  MOVWF  x6D
06A8:  MOVLW  7F
06AA:  MOVWF  x6E
06AC:  MOVLW  08
06AE:  MOVWF  x6F
06B0:  MOVLW  04
06B2:  MOVWF  x70
06B4:  MOVWF  x71
06B6:  MOVLW  78
06B8:  MOVWF  x72
06BA:  CLRF   x73
06BC:  MOVLW  44
06BE:  MOVWF  x74
06C0:  MOVLW  7D
06C2:  MOVWF  x75
06C4:  MOVLW  40
06C6:  MOVWF  x76
06C8:  CLRF   x77
06CA:  MOVLW  20
06CC:  MOVWF  x78
06CE:  MOVLW  40
06D0:  MOVWF  x79
06D2:  MOVLW  44
06D4:  MOVWF  x7A
06D6:  MOVLW  3D
06D8:  MOVWF  x7B
06DA:  CLRF   x7C
06DC:  MOVLW  7F
06DE:  MOVWF  x7D
06E0:  MOVLW  10
06E2:  MOVWF  x7E
06E4:  MOVLW  28
06E6:  MOVWF  x7F
06E8:  MOVLW  44
06EA:  MOVWF  x80
06EC:  CLRF   x81
06EE:  CLRF   x82
06F0:  MOVLW  41
06F2:  MOVWF  x83
06F4:  MOVLW  7F
06F6:  MOVWF  x84
06F8:  MOVLW  40
06FA:  MOVWF  x85
06FC:  CLRF   x86
06FE:  MOVLW  7C
0700:  MOVWF  x87
0702:  MOVLW  04
0704:  MOVWF  x88
0706:  MOVLW  18
0708:  MOVWF  x89
070A:  MOVLW  04
070C:  MOVWF  x8A
070E:  MOVLW  78
0710:  MOVWF  x8B
0712:  MOVLW  7C
0714:  MOVWF  x8C
0716:  MOVLW  08
0718:  MOVWF  x8D
071A:  MOVLW  04
071C:  MOVWF  x8E
071E:  MOVWF  x8F
0720:  MOVLW  78
0722:  MOVWF  x90
0724:  MOVLW  38
0726:  MOVWF  x91
0728:  MOVLW  44
072A:  MOVWF  x92
072C:  MOVWF  x93
072E:  MOVWF  x94
0730:  MOVLW  38
0732:  MOVWF  x95
0734:  MOVLW  7C
0736:  MOVWF  x96
0738:  MOVLW  14
073A:  MOVWF  x97
073C:  MOVWF  x98
073E:  MOVWF  x99
0740:  MOVLW  08
0742:  MOVWF  x9A
0744:  MOVWF  x9B
0746:  MOVLW  14
0748:  MOVWF  x9C
074A:  MOVWF  x9D
074C:  MOVLW  18
074E:  MOVWF  x9E
0750:  MOVLW  7C
0752:  MOVWF  x9F
0754:  MOVWF  xA0
0756:  MOVLW  08
0758:  MOVWF  xA1
075A:  MOVLW  04
075C:  MOVWF  xA2
075E:  MOVWF  xA3
0760:  MOVLW  08
0762:  MOVWF  xA4
0764:  MOVLW  48
0766:  MOVWF  xA5
0768:  MOVLW  54
076A:  MOVWF  xA6
076C:  MOVWF  xA7
076E:  MOVWF  xA8
0770:  MOVLW  20
0772:  MOVWF  xA9
0774:  MOVLW  04
0776:  MOVWF  xAA
0778:  MOVLW  3F
077A:  MOVWF  xAB
077C:  MOVLW  44
077E:  MOVWF  xAC
0780:  MOVLW  40
0782:  MOVWF  xAD
0784:  MOVLW  20
0786:  MOVWF  xAE
0788:  MOVLW  3C
078A:  MOVWF  xAF
078C:  MOVLW  40
078E:  MOVWF  xB0
0790:  MOVWF  xB1
0792:  MOVLW  20
0794:  MOVWF  xB2
0796:  MOVLW  7C
0798:  MOVWF  xB3
079A:  MOVLW  1C
079C:  MOVWF  xB4
079E:  MOVLW  20
07A0:  MOVWF  xB5
07A2:  MOVLW  40
07A4:  MOVWF  xB6
07A6:  MOVLW  20
07A8:  MOVWF  xB7
07AA:  MOVLW  1C
07AC:  MOVWF  xB8
07AE:  MOVLW  3C
07B0:  MOVWF  xB9
07B2:  MOVLW  40
07B4:  MOVWF  xBA
07B6:  MOVLW  30
07B8:  MOVWF  xBB
07BA:  MOVLW  40
07BC:  MOVWF  xBC
07BE:  MOVLW  3C
07C0:  MOVWF  xBD
07C2:  MOVLW  44
07C4:  MOVWF  xBE
07C6:  MOVLW  28
07C8:  MOVWF  xBF
07CA:  MOVLW  10
07CC:  MOVWF  xC0
07CE:  MOVLW  28
07D0:  MOVWF  xC1
07D2:  MOVLW  44
07D4:  MOVWF  xC2
07D6:  MOVLW  0C
07D8:  MOVWF  xC3
07DA:  MOVLW  50
07DC:  MOVWF  xC4
07DE:  MOVWF  xC5
07E0:  MOVWF  xC6
07E2:  MOVLW  3C
07E4:  MOVWF  xC7
07E6:  MOVLW  44
07E8:  MOVWF  xC8
07EA:  MOVLW  64
07EC:  MOVWF  xC9
07EE:  MOVLW  54
07F0:  MOVWF  xCA
07F2:  MOVLW  4C
07F4:  MOVWF  xCB
07F6:  MOVLW  44
07F8:  MOVWF  xCC
07FA:  CLRF   xCD
07FC:  MOVLW  08
07FE:  MOVWF  xCE
0800:  MOVLW  36
0802:  MOVWF  xCF
0804:  MOVLW  41
0806:  MOVWF  xD0
0808:  CLRF   xD1
080A:  CLRF   xD2
080C:  CLRF   xD3
080E:  MOVLW  7F
0810:  MOVWF  xD4
0812:  CLRF   xD5
0814:  CLRF   xD6
0816:  CLRF   xD7
0818:  MOVLW  41
081A:  MOVWF  xD8
081C:  MOVLW  36
081E:  MOVWF  xD9
0820:  MOVLW  08
0822:  MOVWF  xDA
0824:  CLRF   xDB
0826:  MOVLW  10
0828:  MOVWF  xDC
082A:  MOVLW  08
082C:  MOVWF  xDD
082E:  MOVWF  xDE
0830:  MOVLW  10
0832:  MOVWF  xDF
0834:  MOVLW  08
0836:  MOVWF  xE0
0838:  MOVLW  78
083A:  MOVWF  xE1
083C:  MOVLW  46
083E:  MOVWF  xE2
0840:  MOVLW  41
0842:  MOVWF  xE3
0844:  MOVLW  46
0846:  MOVWF  xE4
0848:  MOVLW  78
084A:  MOVWF  xE5
084C:  MOVLW  56
084E:  MOVWF  xE6
0850:  MOVLW  4F
0852:  MOVWF  xE7
0854:  MOVLW  4C
0856:  MOVWF  xE8
0858:  MOVLW  54
085A:  MOVWF  xE9
085C:  MOVLW  53
085E:  MOVWF  xEA
0860:  CLRF   xEB
0862:  CLRF   xEC
0864:  CLRF   xED
0866:  CLRF   xEE
0868:  CLRF   xEF
086A:  CLRF   xF0
086C:  CLRF   xF1
086E:  CLRF   xF2
....................  
....................    //setup_adc_ports(NO_ANALOGS|VSS_VDD); 
....................    //setup_adc(ADC_OFF|ADC_TAD_MUL_0); 
....................    setup_psp(PSP_DISABLED); 
0870:  BCF    F96.4
....................    setup_spi(FALSE); 
0872:  BCF    FC6.5
0874:  BCF    F94.5
0876:  BSF    F94.4
0878:  BCF    F94.3
087A:  MOVLW  00
087C:  MOVWF  FC6
087E:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0880:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0882:  MOVLW  80
0884:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
0886:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
0888:  MOVLW  00
088A:  MOVWF  FCA
088C:  MOVLW  00
088E:  MOVWF  FCB
....................    //setup_comparator(NC_NC_NC_NC); 
....................    //setup_vref(FALSE); 
....................    setup_oscillator(False); 
0890:  CLRF   FD3
....................  
....................    // TODO: USER CODE!! 
....................     
....................    INIT(); 
0892:  MOVLB  0
0894:  BRA    00E4
....................     
....................   // INIT(); 
....................    
....................    
....................    clearram(); 
0896:  RCALL  00B2
....................     
....................          cursorxy(40,30); 
0898:  MOVLW  28
089A:  MOVLB  1
089C:  MOVWF  xF5
089E:  MOVLW  1E
08A0:  MOVWF  xF6
08A2:  MOVLB  0
08A4:  CALL   0084
....................          i=61; 
08A8:  MOVLW  3D
08AA:  MOVLB  1
08AC:  MOVWF  xF2
....................       while(i<90){ 
08AE:  MOVF   xF2,W
08B0:  SUBLW  59
08B2:  BNC   08C2
....................      putchara(i); 
08B4:  MOVFF  1F2,1F3
08B8:  MOVLB  0
08BA:  BRA    015C
....................      i++; 
08BC:  MOVLB  1
08BE:  INCF   xF2,F
....................      //if((i%72) == 0){ 
....................      //clearram(); 
....................      ///} 
....................       } 
08C0:  BRA    08AE
....................       while(1){ 
....................  
....................  
....................                                
.................... //!      delay_ms(100); 
.................... // 
.................... //!      cursorxy(0,1); 
.................... //!     // putString("1.Security Settings"); 
.................... //!      putchar('M'); 
.................... //!      delay_ms(100); 
.................... //!      cursorxy(0,2); 
.................... //!     // putString("2.IP setting"); 
.................... //!      putchar('M'); 
.................... //!      cursorxy(0,3); 
.................... //!      delay_ms(100); 
.................... //!     // putString("3.Registration"); 
.................... //!      putchar('M'); 
.................... //!      cursorxy(0,4); 
.................... //!      //putString("4.Factory Reset"); 
.................... //!       putchar('M'); 
.................... //!      cursorxy(50,5); 
.................... //!      delay_ms(100); 
.................... //!      //putString("Back"); 
.................... //!       putchar('M'); 
....................  
.................... //writedata(0xFF); 
....................        
....................  
....................     
....................       output_high(PIN_E0); 
08C2:  BCF    F96.0
08C4:  BSF    F8D.0
....................       delay_ms(2000); 
08C6:  MOVLW  08
08C8:  MOVWF  xF3
08CA:  MOVLW  FA
08CC:  MOVWF  xF4
08CE:  MOVLB  0
08D0:  CALL   0004
08D4:  MOVLB  1
08D6:  DECFSZ xF3,F
08D8:  BRA    08CA
....................       putc('A'); 
08DA:  MOVLW  41
08DC:  BTFSS  F9E.4
08DE:  BRA    08DC
08E0:  MOVWF  FAD
....................       output_low(PIN_E0); 
08E2:  BCF    F96.0
08E4:  BCF    F8D.0
....................       delay_ms(2000); 
08E6:  MOVLW  08
08E8:  MOVWF  xF3
08EA:  MOVLW  FA
08EC:  MOVWF  xF4
08EE:  MOVLB  0
08F0:  CALL   0004
08F4:  MOVLB  1
08F6:  DECFSZ xF3,F
08F8:  BRA    08EA
....................        
....................       putc('B'); 
08FA:  MOVLW  42
08FC:  BTFSS  F9E.4
08FE:  BRA    08FC
0900:  MOVWF  FAD
....................    } 
0902:  BRA    08C2
....................  
.................... } 
....................  
.................... //-------------------------Reset LCD---------------------------------------- 
....................  
....................  
.................... void reset() 
.................... { 
0904:  SLEEP 
.................... set_tris_d(0x00); 
*
002E:  MOVLW  00
0030:  MOVWF  F95
.................... //TRISC=0; 
.................... //LCD_RESET = FALSE; 
.................... output_low(PIN_D3); 
0032:  BCF    F95.3
0034:  BCF    F8C.3
.................... delay_ms(250); 
0036:  MOVLW  FA
0038:  MOVLB  1
003A:  MOVWF  xF4
003C:  MOVLB  0
003E:  RCALL  0004
.................... output_high(PIN_D3); 
0040:  BCF    F95.3
0042:  BSF    F8C.3
....................  
.................... } 
0044:  GOTO   00EA (RETURN)
....................  
.................... //-------------------------Writing a byte to the LCD---------------------------- 
....................  
.................... void bytesender(int8 val){ 
....................  
....................    int x; 
....................     
....................    for(x=8;x>0;x--) 
0048:  MOVLW  08
004A:  MOVLB  1
004C:  MOVWF  xFC
004E:  MOVF   xFC,F
0050:  BZ    0074
....................       { 
....................          //LCD_SCK=0; 
....................          output_low(PIN_D0); 
0052:  BCF    F95.0
0054:  BCF    F8C.0
....................          if((val&0x80)==0x80) 
0056:  MOVF   xFB,W
0058:  ANDLW  80
005A:  SUBLW  80
005C:  BNZ   0064
....................             //LCD_SDIN=1; 
....................             output_high(PIN_D1); 
005E:  BCF    F95.1
0060:  BSF    F8C.1
....................          else 
0062:  BRA    0068
....................             //LCD_SDIN=0; 
....................             output_low(PIN_D1); 
0064:  BCF    F95.1
0066:  BCF    F8C.1
....................          //LCD_SCK=1; 
....................          output_high(PIN_D0); 
0068:  BCF    F95.0
006A:  BSF    F8C.0
....................          val=val<<1; 
006C:  BCF    FD8.0
006E:  RLCF   xFB,F
....................       } 
0070:  DECF   xFC,F
0072:  BRA    004E
.................... } 
0074:  MOVLB  0
0076:  RETLW  00
....................  
....................     
....................  
.................... //----------------------------Writing Command byte--------------------------------- 
....................  
....................  
.................... void writecommand(int8 val){ 
....................    //LCD_DC=0; 
....................    output_low(PIN_D2); 
0078:  BCF    F95.2
007A:  BCF    F8C.2
....................    bytesender(val); 
007C:  MOVFF  1F8,1FB
0080:  RCALL  0048
....................  
.................... } 
0082:  RETLW  00
....................  
.................... //--------------------------Writing character byte------------------------------------- 
.................... void writedata(int8 val){ 
....................    //LCD_DC=1; 
....................    output_high(PIN_D2); 
*
00A6:  BCF    F95.2
00A8:  BSF    F8C.2
....................    bytesender(val); 
00AA:  MOVFF  1FA,1FB
00AE:  RCALL  0048
.................... } 
00B0:  RETLW  00
....................  
....................  
.................... void putchara(char chr){ 
....................  
....................    int16 tablept, count, char_column; 
....................  
....................    if ((chr<0x20)||(chr>0x7f)) { 
*
015C:  MOVLB  1
015E:  MOVF   xF3,W
0160:  SUBLW  1F
0162:  BC    016A
0164:  MOVF   xF3,W
0166:  SUBLW  7F
0168:  BC    016C
....................     
....................       return;                           // Exit function if character is not found. 
016A:  BRA    01BE
....................    }   
....................     
....................    tablept = ((5*chr) - 160);                  // Point to the columns of the character in the table. 
016C:  MOVF   xF3,W
016E:  MULLW  05
0170:  MOVF   FF3,W
0172:  ADDLW  60
0174:  MOVWF  xF4
0176:  CLRF   xF5
....................  
....................    for (count=5;count>0;count--)                     // Draw the columns to print the character. 
0178:  CLRF   xF7
017A:  MOVLW  05
017C:  MOVWF  xF6
017E:  MOVF   xF6,F
0180:  BNZ   0186
0182:  MOVF   xF7,F
0184:  BZ    01B6
....................    { 
....................       char_column = pixel_table[tablept]; 
0186:  MOVLW  06
0188:  ADDWF  xF4,W
018A:  MOVWF  FE9
018C:  MOVLW  00
018E:  ADDWFC xF5,W
0190:  MOVWF  FEA
0192:  MOVF   FEF,W
0194:  CLRF   03
0196:  MOVWF  xF8
0198:  MOVFF  03,1F9
....................     //char_column = 0x15; 
....................       writedata(char_column); 
019C:  MOVFF  1F8,1FA
01A0:  MOVLB  0
01A2:  RCALL  00A6
....................       tablept++; 
01A4:  MOVLB  1
01A6:  INCF   xF4,F
01A8:  BTFSC  FD8.2
01AA:  INCF   xF5,F
....................     
....................    } 
01AC:  MOVF   xF6,W
01AE:  BTFSC  FD8.2
01B0:  DECF   xF7,F
01B2:  DECF   xF6,F
01B4:  BRA    017E
....................    writedata(0x00);                              // 1 pixel spacing per character. 
01B6:  CLRF   xFA
01B8:  MOVLB  0
01BA:  RCALL  00A6
01BC:  MOVLB  1
.................... } 
01BE:  MOVLB  0
01C0:  GOTO   08BC (RETURN)
....................  
....................  
.................... void putString(char *s) 
.................... { 
....................    while(*s) {putchar(*s++);}                        // Points to one ASCII to be written one at a time. 
.................... } 
....................  
....................  
.................... //-------------------Clear RAM---------------------------- 
.................... void clearram(void){ 
....................  
....................    int16 ddram; 
....................    cursorxy(0,0);                                 // Cursor Home. 
*
00B2:  MOVLB  1
00B4:  CLRF   xF5
00B6:  CLRF   xF6
00B8:  MOVLB  0
00BA:  RCALL  0084
....................    for (ddram=504;ddram>0;ddram--){ 
00BC:  MOVLW  01
00BE:  MOVLB  1
00C0:  MOVWF  xF4
00C2:  MOVLW  F8
00C4:  MOVWF  xF3
00C6:  MOVF   xF3,F
00C8:  BNZ   00CE
00CA:  MOVF   xF4,F
00CC:  BZ    00E0
....................     
....................     writedata(0x00);                               // 6*84 = 504 DDRAM addresses 
00CE:  CLRF   xFA
00D0:  MOVLB  0
00D2:  RCALL  00A6
....................     
....................    }       
00D4:  MOVLB  1
00D6:  MOVF   xF3,W
00D8:  BTFSC  FD8.2
00DA:  DECF   xF4,F
00DC:  DECF   xF3,F
00DE:  BRA    00C6
.................... } 
00E0:  MOVLB  0
00E2:  RETLW  00
.................... //------------------------go to Cursor XY-------------------- 
....................  
.................... void cursorxy(int8 x, int8 y){ 
....................  
....................    writecommand(0x40|(y&0x07));   // Y axis 
*
0084:  MOVLB  1
0086:  MOVF   xF6,W
0088:  ANDLW  07
008A:  IORLW  40
008C:  MOVWF  xF7
008E:  MOVWF  xF8
0090:  MOVLB  0
0092:  RCALL  0078
....................    writecommand(0x80|(x&0x7f));   // X axis 
0094:  MOVLB  1
0096:  MOVF   xF5,W
0098:  ANDLW  7F
009A:  IORLW  80
009C:  MOVWF  xF7
009E:  MOVWF  xF8
00A0:  MOVLB  0
00A2:  RCALL  0078
....................  
.................... } 
00A4:  RETLW  00
....................  
.................... //----------------------------INITIALIZING--------------------------- 
.................... void INIT(){ 
....................  
....................   // ADCON1=6;// Idid this 
....................    set_tris_d(0x00); 
*
00E4:  MOVLW  00
00E6:  MOVWF  F95
.................... //TRISC=0; 
.................... //TRISB=0x00; 
.................... //PORTB=1; 
.................... reset(); 
00E8:  BRA    002E
....................  
.................... //----------------------------control settings------------------------- 
.................... writecommand(0x21); 
00EA:  MOVLW  21
00EC:  MOVLB  1
00EE:  MOVWF  xF8
00F0:  MOVLB  0
00F2:  RCALL  0078
.................... writecommand(0xC2);      // Set LCD Voltage to about 7V 
00F4:  MOVLW  C2
00F6:  MOVLB  1
00F8:  MOVWF  xF8
00FA:  MOVLB  0
00FC:  RCALL  0078
.................... writecommand(0x13);      // Adjust voltage bias. 
00FE:  MOVLW  13
0100:  MOVLB  1
0102:  MOVWF  xF8
0104:  MOVLB  0
0106:  RCALL  0078
.................... writecommand(0x20); 
0108:  MOVLW  20
010A:  MOVLB  1
010C:  MOVWF  xF8
010E:  MOVLB  0
0110:  RCALL  0078
.................... writecommand(0x09); 
0112:  MOVLW  09
0114:  MOVLB  1
0116:  MOVWF  xF8
0118:  MOVLB  0
011A:  RCALL  0078
.................... delay_ms(500); 
011C:  MOVLW  02
011E:  MOVLB  1
0120:  MOVWF  xF3
0122:  MOVLW  FA
0124:  MOVWF  xF4
0126:  MOVLB  0
0128:  RCALL  0004
012A:  MOVLB  1
012C:  DECFSZ xF3,F
012E:  BRA    0122
.................... writecommand(0x08);      // Clear display 
0130:  MOVLW  08
0132:  MOVWF  xF8
0134:  MOVLB  0
0136:  RCALL  0078
.................... delay_ms(10); 
0138:  MOVLW  0A
013A:  MOVLB  1
013C:  MOVWF  xF4
013E:  MOVLB  0
0140:  RCALL  0004
.................... writecommand(0x0C); 
0142:  MOVLW  0C
0144:  MOVLB  1
0146:  MOVWF  xF8
0148:  MOVLB  0
014A:  RCALL  0078
.................... clearram(); 
014C:  RCALL  00B2
.................... cursorxy(0,0); 
014E:  MOVLB  1
0150:  CLRF   xF5
0152:  CLRF   xF6
0154:  MOVLB  0
0156:  RCALL  0084
....................  
.................... //while(1){ 
.................... ///writedata(0x01); 
.................... //putchara('P'); 
.................... //putchara('R'); 
.................... //putchara('A'); 
.................... //putchara('B'); 
.................... //putchara('A'); 
.................... //putchara('S'); 
.................... //putchara('H'); 
....................  
.................... //} 
....................  
.................... //while(1){ 
....................  
.................... //   delay_ms(100); 
.................... //   writedata(0xFF); 
.................... //   writedata(0x0F); 
.................... //   writedata(0xF0); 
.................... //} 
....................  
.................... } 
0158:  GOTO   0896 (RETURN)

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0D   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
